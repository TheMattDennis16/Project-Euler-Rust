fn solve_algorithm(number: &str) -> u64 {
    let chars: Vec<char> = number.chars().collect();
    let mut maximum: u64 = 0;
    for i in 0..(chars.len()-13) {
        let mut sum: u64 = chars[i].to_digit(10).unwrap() as u64;
        for y in i..(i+12) {
            sum = sum * (chars[y].to_digit(10).unwrap() as u64);
        }
        if sum > maximum {
            maximum = sum;
        }
    }
    maximum
}

fn solve_stdlib(number: &str) -> u64 {
    number.chars()
        .filter_map(|ch| ch.to_digit(10)) //Convert the char to a base-10 digit
        .map(|num| num as u64) //Map the u32 result to a u64 number
        .collect::<Vec<_>>() //Collect into a Vector with an inferred type
        .windows(13) //Provides an iterator over a set range of size 13
        .map(|win| win.iter().fold(1u64, |p, &n| p * n)) //Maps the sum multiplied by the current index
        .max()
        .unwrap()
}

#[cfg(test)]
mod tests {
    #[test]
    fn test_solve() {
        assert_eq!(23514624000, super::solve_algorithm("731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197846862248839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"));
    }

    #[test]
    fn test_solve_stdlib() {
        assert_eq!(23514624000, super::solve_stdlib("731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221553975369781797784617406495514929086256932197846862248839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"));
    }
}